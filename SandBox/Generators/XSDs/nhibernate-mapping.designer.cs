// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>SandBox</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>True</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>True</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace SandBox.Generators.XSDs
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;
    
    
    public partial class any 
    {
        
        private List<meta> metaField;
        
        private List<metavalue> metavalueField;
        
        private List<Column> columnField;
        
        private string column1Field;
        
        private string idtypeField;
        
        private string metatypeField;
        
        private string nameField;
        
        private string accessField;
        
        private bool insertField;
        
        private bool updateField;
        
        private string cascadeField;
        
        private string indexField;
        
        private bool optimisticlockField;
        
        private bool lazyField;
        
        private string nodeField;
        
    public string Column {get; set;}

    public string IdType {get; set;}

    public string MetaType {get; set;}

    public string name {get; set;}

    public string access {get; set;}

    public string cascade {get; set;}

    public string index {get; set;}

    public string node {get; set;}

        
        public any() 
        {
            Columns = new List<Column>();
            metavalueField = new List<metavalue>();
            metaField = new List<meta>();
            insertField = true;
            updateField = true;
            optimisticlockField = true;
            lazyField = false;
        }

        public virtual List<meta> meta { get; set; }

        public virtual List<metavalue> metavalue { get; set; }

        public virtual List<Column> Columns { get; set; }
        
        [DefaultValue(true)]
        public virtual bool insert {
            get {
                return insertField;
            }
            set {
                insertField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool update {
            get {
                return updateField;
            }
            set {
                updateField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get {
                return optimisticlockField;
            }
            set {
                optimisticlockField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool lazy {
            get {
                return lazyField;
            }
            set {
                lazyField = value;
            }
        }
    }
    
    public partial class meta {
        
        private string attributeField;
        
        private bool inheritField;
        
        private List<string> textField;
        
    public string attribute {get; set;}

        
        public meta() {
            textField = new List<string>();
            inheritField = true;
        }
        
        [DefaultValue(true)]
        public virtual bool inherit {
            get {
                return inheritField;
            }
            set {
                inheritField = value;
            }
        }
        
        [XmlText()]
        public virtual List<string> Text 
        {
            get {
                return textField;
            }
            set {
                textField = value;
            }
        }
    }
    
    public partial class metavalue 
    {
        
        private string valueField;
        
        private string classField;
        
        public string value {get; set;}

        public string Class {get; set;}

    }
    
    public partial class Column 
    {
        
        private comment commentField;
        
        private string nameField;
        
        private string lengthField;
        
        private string precisionField;
        
        private string scaleField;
        
        private bool notnullField;
        
        private bool notnullFieldSpecified;
        
        private bool uniqueField;
        
        private bool uniqueFieldSpecified;
        
        private string uniquekeyField;
        
        private string sqltypeField;
        
        private string indexField;
        
        private string checkField;
        
        private string defaultField;
        
    public string name {get; set;}

    public string length {get; set;}

    public string precision {get; set;}

    public string scale {get; set;}

    public bool notnull {get; set;}

    [XmlIgnore()]
    public bool notnullSpecified {get; set;}

    public bool unique {get; set;}

    [XmlIgnore()]
    public bool uniqueSpecified {get; set;}

    public string uniquekey {get; set;}

    public string sqltype {get; set;}

    public string Index {get; set;}

    public string Check {get; set;}

    public string Default {get; set;}

        
        /// <summary>
        /// column class constructor
        /// </summary>
        public Column() 
        {
            commentField = new comment();
        }
        
        public virtual comment comment {
            get {
                return commentField;
            }
            set {
                commentField = value;
            }
        }
    }
    
    public partial class comment {
        
        private List<string> textField;
        
        /// <summary>
        /// comment class constructor
        /// </summary>
        public comment() {
            textField = new List<string>();
        }
        
        [XmlText()]
        public virtual List<string> Text {
            get {
                return textField;
            }
            set {
                textField = value;
            }
        }
    }
    
    public partial class array {
        
        private List<meta> metaField;
        
        private subselect subselectField;
        
        private cache cacheField;
        
        private List<synchronize> synchronizeField;
        
        private comment commentField;
        
        private key keyField;
        
        private object itemField;
        
        private object item1Field;
        
        private loader loaderField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private customSQL sqldeleteallField;
        
        private string nameField;
        
        private string accessField;
        
        private string tableField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string subselect1Field;
        
        private bool inverseField;
        
        private bool mutableField;
        
        private string elementclassField;
        
        private string cascadeField;
        
        private string whereField;
        
        private int batchsizeField;
        
        private bool batchsizeFieldSpecified;
        
        private bool outerjoinFieldSpecified;
        
        private bool fetchFieldSpecified;
        
        private string persisterField;
        
        private string collectiontypeField;
        
        private string checkField;
        
        private bool optimisticlockField;
        
        private string nodeField;
        
        private bool embedxmlField;
        
    public object Item {get; set;}

    public object Item1 {get; set;}

    public string name {get; set;}

    public string access {get; set;}

    public string table {get; set;}

    public string schema {get; set;}

    public string catalog {get; set;}

    public string subselect1 {get; set;}

    public string elementclass {get; set;}

    public string cascade {get; set;}

    public string where {get; set;}

    public int batchsize {get; set;}

    [XmlIgnore()]
    public bool batchsizeSpecified {get; set;}

    [XmlIgnore()]
    public bool outerjoinSpecified {get; set;}

    [XmlIgnore()]
    public bool fetchSpecified {get; set;}

    public string persister {get; set;}

    public string collectiontype {get; set;}

    public string check {get; set;}

    public string node {get; set;}

        
        public array() {
            sqldeleteallField = new customSQL();
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            loaderField = new loader();
            keyField = new key();
            commentField = new comment();
            synchronizeField = new List<synchronize>();
            cacheField = new cache();
            subselectField = new subselect();
            metaField = new List<meta>();
            inverseField = false;
            mutableField = true;
            optimisticlockField = true;
            embedxmlField = true;
        }
        
        public virtual List<meta> meta {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual subselect subselect {
            get {
                return subselectField;
            }
            set {
                subselectField = value;
            }
        }
        
        public virtual cache cache {
            get {
                return cacheField;
            }
            set {
                cacheField = value;
            }
        }
        
        public virtual List<synchronize> synchronize {
            get {
                return synchronizeField;
            }
            set {
                synchronizeField = value;
            }
        }
        
        public virtual comment comment {
            get {
                return commentField;
            }
            set {
                commentField = value;
            }
        }
        
        public virtual key key {
            get {
                return keyField;
            }
            set {
                keyField = value;
            }
        }
        
        public virtual loader loader {
            get {
                return loaderField;
            }
            set {
                loaderField = value;
            }
        }
        
        public virtual customSQL sqlinsert {
            get {
                return sqlinsertField;
            }
            set {
                sqlinsertField = value;
            }
        }
        
        public virtual customSQL sqlupdate {
            get {
                return sqlupdateField;
            }
            set {
                sqlupdateField = value;
            }
        }
        
        public virtual customSQL sqldelete {
            get {
                return sqldeleteField;
            }
            set {
                sqldeleteField = value;
            }
        }
        
        public virtual customSQL sqldeleteall {
            get {
                return sqldeleteallField;
            }
            set {
                sqldeleteallField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool inverse {
            get {
                return inverseField;
            }
            set {
                inverseField = value;
            }
        }

        [DefaultValue(true)]
        public virtual bool mutable { get; set; }

        public virtual outerJoinStrategy outerjoin { get; set; }

        public virtual collectionFetchMode fetch { get; set; }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get {
                return optimisticlockField;
            }
            set {
                optimisticlockField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool embedxml {
            get {
                return embedxmlField;
            }
            set {
                embedxmlField = value;
            }
        }
    }
    
    public partial class subselect {
        
        private List<string> textField;
        
        /// <summary>
        /// subselect class constructor
        /// </summary>
        public subselect() {
            textField = new List<string>();
        }
        
        [XmlText()]
        public virtual List<string> Text {
            get {
                return textField;
            }
            set {
                textField = value;
            }
        }
    }
    
    public partial class cache {
        
        private string regionField;
        
        private cacheInclude includeField;
        
    public string region {get; set;}

        
        public cache() 
        {
            includeField = cacheInclude.all;
        }

        public virtual cacheUsage usage { get; set; }

        [DefaultValue(cacheInclude.all)]
        public virtual cacheInclude include { get; set; }
    }
    
    public enum cacheUsage {
        
        /// <remarks/>
        [XmlEnum("read-only")]
        @readonly,
        
        /// <remarks/>
        [XmlEnum("read-write")]
        readwrite,
        
        /// <remarks/>
        [XmlEnum("nonstrict-read-write")]
        nonstrictreadwrite,
        
        /// <remarks/>
        transactional,
    }
    
    public enum cacheInclude {
        
        /// <remarks/>
        all,
        
        /// <remarks/>
        [XmlEnum("non-lazy")]
        nonlazy,
    }
    
    public partial class synchronize {
        
        private string tableField;
        
    public string table {get; set;}

    }
    
    public partial class key {
        
        private List<Column> columnField;
        
        private string column1Field;
        
        private string propertyrefField;
        
        private string foreignkeyField;
        
        private ondelete ondeleteField;
        
        private bool notnullField;
        
        private bool notnullFieldSpecified;
        
        private bool updateField;
        
        private bool updateFieldSpecified;
        
        private bool uniqueField;
        
        private bool uniqueFieldSpecified;
        
    public string column1 {get; set;}

    public string propertyref {get; set;}

    public string foreignkey {get; set;}

    public bool notnull {get; set;}

    [XmlIgnore()]
    public bool notnullSpecified {get; set;}

    public bool update {get; set;}

    [XmlIgnore()]
    public bool updateSpecified {get; set;}

    public bool unique {get; set;}

    [XmlIgnore()]
    public bool uniqueSpecified {get; set;}

        
        public key() {
            columnField = new List<Column>();
            ondeleteField = ondelete.noaction;
        }
        
        public virtual List<Column> column 
        {
            get;
            set;
        }
        
        [DefaultValue(ondelete.noaction)]
        public virtual ondelete ondelete {
            get;
            set;
        }
    }
    
    public enum ondelete {
        
        /// <remarks/>
        cascade,
        
        /// <remarks/>
        noaction,
    }
    
    public partial class index {
        
        private List<Column> columnField;
        
        private string column1Field;
        
        private string typeField;
        
        private string lengthField;
        
    public string column1 {get; set;}

    public string type {get; set;}

    public string length {get; set;}

        
        /// <summary>
        /// index class constructor
        /// </summary>
        public index() {
            columnField = new List<Column>();
        }
        
        public virtual List<Column> column {
            get;
            set;
        }
    }
    
    public partial class listindex {
        
        private Column columnField;
        
        private string column1Field;
        
        private string baseField;
        
    public string column1 {get; set;}

    public string Case {get; set;}

        
        /// <summary>
        /// listindex class constructor
        /// </summary>
        public listindex() {
            columnField = new Column();
        }
        
        public virtual Column column {
            get;
            set;
        }
    }
    
    public partial class compositeelement {
        
        private List<meta> metaField;
        
        private parent parentField;
        
        private List<object> itemsField;
        
        private string classField;
        
        private string nodeField;
        
    public string Class {get; set;}

    public string Node {get; set;}

        
        /// <summary>
        /// compositeelement class constructor
        /// </summary>
        public compositeelement() {
            itemsField = new List<object>();
            parentField = new parent();
            metaField = new List<meta>();
        }
        
        public virtual List<meta> meta {
            get;
            set;
        }
        
        public virtual parent parent {
            get;
            set;
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
    }
    
    public partial class parent {
        
        private string nameField;
        
    public string name {get; set;}

    }
    
    public partial class manytoone {
        
        private List<meta> metaField;
        
        private List<object> itemsField;
        
        private string nameField;
        
        private string accessField;
        
        private string classField;
        
        private string entitynameField;
        
        private string columnField;
        
        private bool notnullField;
        
        private bool notnullFieldSpecified;
        
        private bool uniqueField;
        
        private string uniquekeyField;
        
        private string indexField;
        
        private string cascadeField;
        
        private bool outerjoinFieldSpecified;
        
        private bool fetchFieldSpecified;
        
        private bool updateField;
        
        private bool insertField;
        
        private bool optimisticlockField;
        
        private string foreignkeyField;
        
        private string propertyrefField;
        
        private string formulaField;
        
        private bool lazyFieldSpecified;
        
        private notFoundMode notfoundField;
        
        private string nodeField;
        
        private bool embedxmlField;
        
    public string name {get; set;}

    public string access {get; set;}

    public string Class {get; set;}

    public string entityname {get; set;}

    public string column {get; set;}

    public bool notnull {get; set;}

    [XmlIgnore()]
    public bool notnullSpecified {get; set;}

    public string uniquekey {get; set;}

    public string index {get; set;}

    public string cascade {get; set;}

    [XmlIgnore()]
    public bool outerjoinSpecified {get; set;}

    [XmlIgnore()]
    public bool fetchSpecified {get; set;}

    public string foreignkey {get; set;}

    public string propertyref {get; set;}

    public string formula {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public string node {get; set;}

        
        public manytoone() {
            itemsField = new List<object>();
            metaField = new List<meta>();
            uniqueField = false;
            updateField = true;
            insertField = true;
            optimisticlockField = true;
            notfoundField = notFoundMode.exception;
            embedxmlField = true;
        }
        
        public virtual List<meta> meta {
            get;
            set;
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool unique {
            get;
            set;
        }
        
        public virtual outerJoinStrategy outerjoin {
            get;
            set;
        }
        
        public virtual fetchMode fetch {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool update {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool insert {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get;
            set;
        }
        
        public virtual laziness lazy {
            get;
            set;
        }
        
        [DefaultValue(notFoundMode.exception)]
        public virtual notFoundMode notfound {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool embedxml {
            get;
            set;
        }
    }
    
    public partial class formula {
        
        private List<string> textField;
        
        /// <summary>
        /// formula class constructor
        /// </summary>
        public formula() {
            textField = new List<string>();
        }
        
        [XmlText()]
        public virtual List<string> Text {
            get;
            set;
        }
    }
    
    public enum outerJoinStrategy 
    {
        
        /// <remarks/>
        auto,
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    public enum fetchMode {
        
        /// <remarks/>
        select,
        
        /// <remarks/>
        join,
    }
    
    public enum laziness {
        
        /// <remarks/>
        @false,
        
        /// <remarks/>
        proxy,
        
        /// <remarks/>
        [XmlEnum("no-proxy")]
        noproxy,
    }
    
    public enum notFoundMode {
        
        /// <remarks/>
        ignore,
        
        /// <remarks/>
        exception,
    }
    
    public partial class nestedcompositeelement {
        
        private parent parentField;
        
        private List<object> itemsField;
        
        private string classField;
        
        private string nameField;
        
        private string accessField;
        
        private string nodeField;
        
    public string Class {get; set;}

    public string name {get; set;}

    public string access {get; set;}

    public string node {get; set;}

        
        /// <summary>
        /// nestedcompositeelement class constructor
        /// </summary>
        public nestedcompositeelement() {
            itemsField = new List<object>();
            parentField = new parent();
        }
        
        public virtual parent parent {
            get;
            set;
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
    }
    
    public partial class property {
        
        private List<meta> metaField;
        
        private List<object> itemsField;
        
        private type typeField;
        
        private string nameField;
        
        private string nodeField;
        
        private string accessField;
        
        private string type1Field;
        
        private string columnField;
        
        private string lengthField;
        
        private string precisionField;
        
        private string scaleField;
        
        private bool notnullField;
        
        private bool notnullFieldSpecified;
        
        private bool uniqueField;
        
        private string uniquekeyField;
        
        private string indexField;
        
        private bool updateField;
        
        private bool updateFieldSpecified;
        
        private bool insertField;
        
        private bool insertFieldSpecified;
        
        private bool optimisticlockField;
        
        private string formulaField;
        
        private bool lazyField;
        
        private propertyGeneration generatedField;
        
    public string name {get; set;}

    public string node {get; set;}

    public string access {get; set;}

    public string type1 {get; set;}

    public string column {get; set;}

    public string length {get; set;}

    public string precision {get; set;}

    public string scale {get; set;}

    public bool notnull {get; set;}

    [XmlIgnore()]
    public bool notnullSpecified {get; set;}

    public string uniquekey {get; set;}

    public string index {get; set;}

    public bool update {get; set;}

    [XmlIgnore()]
    public bool updateSpecified {get; set;}

    public bool insert {get; set;}

    [XmlIgnore()]
    public bool insertSpecified {get; set;}

    public string formula {get; set;}

        
        public property() {
            typeField = new type();
            itemsField = new List<object>();
            metaField = new List<meta>();
            uniqueField = false;
            optimisticlockField = true;
            lazyField = false;
            generatedField = propertyGeneration.never;
        }
        
        public virtual List<meta> meta {
            get;
            set;
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
        
        public virtual type type {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool unique {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool lazy {
            get;
            set;
        }
        
        [DefaultValue(propertyGeneration.never)]
        public virtual propertyGeneration generated {
            get;
            set;
        }
    }
    
    public partial class type {
        
        private List<param> paramField;
        
        private string nameField;
        
    public string name {get; set;}

        
        /// <summary>
        /// type class constructor
        /// </summary>
        public type() {
            paramField = new List<param>();
        }
        
        public virtual List<param> param {
            get {
                return paramField;
            }
            set {
                paramField = value;
            }
        }
    }
    
    public partial class param {
        
        private string nameField;
        
        private List<string> textField;
        
    public string name {get; set;}

        
        /// <summary>
        /// param class constructor
        /// </summary>
        public param() 
        {
            textField = new List<string>();
        }
        
        [XmlText()]
        public virtual List<string> Text {
            get {
                return textField;
            }
            set {
                textField = value;
            }
        }
    }
    
    public enum propertyGeneration {
        
        /// <remarks/>
        never,
        
        /// <remarks/>
        insert,
        
        /// <remarks/>
        always,
    }
    
    public partial class element {
        
        private List<object> itemsField;
        
        private type typeField;
        
        private string columnField;
        
        private string nodeField;
        
        private string formulaField;
        
        private string type1Field;
        
        private string lengthField;
        
        private string precisionField;
        
        private string scaleField;
        
        private bool notnullField;
        
        private bool uniqueField;
        
    public string column {get; set;}

    public string node {get; set;}

    public string formula {get; set;}

    public string type1 {get; set;}

    public string length {get; set;}

    public string precision {get; set;}

    public string scale {get; set;}

        
        public element() {
            typeField = new type();
            itemsField = new List<object>();
            notnullField = false;
            uniqueField = false;
        }
        
        public virtual List<object> Items {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        public virtual type type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool notnull {
            get {
                return notnullField;
            }
            set {
                notnullField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool unique {
            get {
                return uniqueField;
            }
            set {
                uniqueField = value;
            }
        }
    }
    
    public partial class manytoany {
        
        private List<metavalue> metavalueField;
        
        private List<Column> columnField;
        
        private string column1Field;
        
        private string idtypeField;
        
        private string metatypeField;
        
    public string column1 {get; set;}

    public string idtype {get; set;}

    public string metatype {get; set;}

        
        /// <summary>
        /// manytoany class constructor
        /// </summary>
        public manytoany() {
            columnField = new List<Column>();
            metavalueField = new List<metavalue>();
        }
        
        public virtual List<metavalue> metavalue {
            get {
                return metavalueField;
            }
            set {
                metavalueField = value;
            }
        }
        
        public virtual List<Column> column {
            get {
                return columnField;
            }
            set {
                columnField = value;
            }
        }
    }
    
    public partial class manytomany {
        
        private List<meta> metaField;
        
        private List<object> itemsField;
        
        private List<filter> filterField;
        
        private string classField;
        
        private string nodeField;
        
        private bool embedxmlField;
        
        private string entitynameField;
        
        private string columnField;
        
        private string formulaField;
        
        private notFoundMode notfoundField;
        
        private bool outerjoinFieldSpecified;
        
        private bool fetchFieldSpecified;
        
        private bool lazyFieldSpecified;
        
        private string foreignkeyField;
        
        private bool uniqueField;
        
        private string whereField;
        
        private string orderbyField;
        
        private string propertyrefField;
        
    public string Class {get; set;}

    public string node {get; set;}

    public string entityname {get; set;}

    public string column {get; set;}

    public string formula {get; set;}

    [XmlIgnore()]
    public bool outerjoinSpecified {get; set;}

    [XmlIgnore()]
    public bool fetchSpecified {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public string foreignkey {get; set;}

    public string where {get; set;}

    public string orderby {get; set;}

    public string propertyref {get; set;}

        
        public manytomany() {
            filterField = new List<filter>();
            itemsField = new List<object>();
            metaField = new List<meta>();
            embedxmlField = true;
            notfoundField = notFoundMode.exception;
            uniqueField = false;
        }
        
        public virtual List<meta> meta {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual List<object> Items {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        public virtual List<filter> filter {
            get {
                return filterField;
            }
            set {
                filterField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool embedxml {
            get {
                return embedxmlField;
            }
            set {
                embedxmlField = value;
            }
        }
        
        [DefaultValue(notFoundMode.exception)]
        public virtual notFoundMode notfound {
            get {
                return notfoundField;
            }
            set {
                notfoundField = value;
            }
        }
        
        public virtual outerJoinStrategy outerjoin {
            get;
            set;
        }
        
        public virtual fetchMode fetch {
            get;
            set;
        }
        
        public virtual restrictedLaziness lazy {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool unique {
            get;
            set;
        }
    }
    
    public partial class filter {
        
        private string nameField;
        
        private string conditionField;
        
        private List<string> textField;
        
    public string name {get; set;}

    public string condition {get; set;}

        
        /// <summary>
        /// filter class constructor
        /// </summary>
        public filter() {
            textField = new List<string>();
        }
        
        [XmlText()]
        public virtual List<string> Text {
            get {
                return textField;
            }
            set {
                textField = value;
            }
        }
    }
    
    public enum restrictedLaziness {
        
        /// <remarks/>
        @false,
        
        /// <remarks/>
        proxy,
    }
    
    public partial class onetomany {
        
        private string classField;
        
        private notFoundMode notfoundField;
        
        private string nodeField;
        
        private bool embedxmlField;
        
        private string entitynameField;
        
    public string Class {get; set;}

    public string Node {get; set;}

    public string Entityname {get; set;}

        
        public onetomany() {
            notfoundField = notFoundMode.exception;
            embedxmlField = true;
        }
        
        [DefaultValue(notFoundMode.exception)]
        public virtual notFoundMode notfound {
            get {
                return notfoundField;
            }
            set {
                notfoundField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool embedxml {
            get {
                return embedxmlField;
            }
            set {
                embedxmlField = value;
            }
        }
    }
    
    public partial class loader {
        
        private string queryrefField;
        
    public string queryref {get; set;}

    }
    
    public partial class customSQL {
        
        private bool callableField;
        
        private bool callableFieldSpecified;
        
        private bool checkFieldSpecified;
        
        private List<string> textField;
        
    public bool callable {get; set;}

    [XmlIgnore()]
    public bool callableSpecified {get; set;}

    [XmlIgnore()]
    public bool checkSpecified {get; set;}

        
        /// <summary>
        /// customSQL class constructor
        /// </summary>
        public customSQL() {
            textField = new List<string>();
        }

        public virtual customSQLCheck check { get; set; }

        [XmlText()]
        public virtual List<string> Text
        {
            get;
            set;
        }
    }
    
    public enum customSQLCheck {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        rowcount,
        
        /// <remarks/>
        param,
    }
    
    public enum collectionFetchMode {
        
        /// <remarks/>
        select,
        
        /// <remarks/>
        join,
        
        /// <remarks/>
        subselect,
    }
    
    public partial class bag {
        
        private List<meta> metaField;
        
        private subselect subselectField;
        
        private cache cacheField;
        
        private List<synchronize> synchronizeField;
        
        private comment commentField;
        
        private key keyField;
        
        private object itemField;
        
        private loader loaderField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private customSQL sqldeleteallField;
        
        private List<filter> filterField;
        
        private string nameField;
        
        private string accessField;
        
        private string tableField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string subselect1Field;
        
        private bool lazyFieldSpecified;
        
        private bool inverseField;
        
        private bool mutableField;
        
        private string cascadeField;
        
        private string orderbyField;
        
        private string whereField;
        
        private int batchsizeField;
        
        private bool batchsizeFieldSpecified;
        
        private bool outerjoinFieldSpecified;
        
        private bool fetchFieldSpecified;
        
        private string persisterField;
        
        private string collectiontypeField;
        
        private string checkField;
        
        private bool optimisticlockField;
        
        private string nodeField;
        
        private bool embedxmlField;
        
        private bool genericField;
        
        private bool genericFieldSpecified;
        
    public object Item {get; set;}

    public string name {get; set;}

    public string access {get; set;}

    public string table {get; set;}

    public string schema {get; set;}

    public string catalog {get; set;}

    public string subselect1 {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public string cascade {get; set;}

    public string orderby {get; set;}

    public string where {get; set;}

    public int batchsize {get; set;}

    [XmlIgnore()]
    public bool batchsizeSpecified {get; set;}

    [XmlIgnore()]
    public bool outerjoinSpecified {get; set;}

    [XmlIgnore()]
    public bool fetchSpecified {get; set;}

    public string persister {get; set;}

    public string collectiontype {get; set;}

    public string check {get; set;}

    public string node {get; set;}

    public bool generic {get; set;}

    [XmlIgnore()]
    public bool genericSpecified {get; set;}

        
        public bag() {
            filterField = new List<filter>();
            sqldeleteallField = new customSQL();
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            loaderField = new loader();
            keyField = new key();
            commentField = new comment();
            synchronizeField = new List<synchronize>();
            cacheField = new cache();
            subselectField = new subselect();
            metaField = new List<meta>();
            inverseField = false;
            mutableField = true;
            optimisticlockField = true;
            embedxmlField = true;
        }
        
        public virtual List<meta> meta {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual subselect subselect {
            get {
                return subselectField;
            }
            set {
                subselectField = value;
            }
        }
        
        public virtual cache cache {
            get {
                return cacheField;
            }
            set {
                cacheField = value;
            }
        }
        
        public virtual List<synchronize> synchronize {
            get {
                return synchronizeField;
            }
            set {
                synchronizeField = value;
            }
        }
        
        public virtual comment comment {
            get {
                return commentField;
            }
            set {
                commentField = value;
            }
        }
        
        public virtual key key {
            get {
                return keyField;
            }
            set {
                keyField = value;
            }
        }
        
        public virtual loader loader {
            get {
                return loaderField;
            }
            set {
                loaderField = value;
            }
        }
        
        public virtual customSQL sqlinsert {
            get {
                return sqlinsertField;
            }
            set {
                sqlinsertField = value;
            }
        }
        
        public virtual customSQL sqlupdate {
            get {
                return sqlupdateField;
            }
            set {
                sqlupdateField = value;
            }
        }

        public virtual customSQL sqldelete { get; set; }

        public virtual customSQL sqldeleteall { get; set; }

        public virtual List<filter> filter { get; set; }

        public virtual collectionLazy lazy { get; set; }
        
        [DefaultValue(false)]
        public virtual bool inverse {
            get {
                return inverseField;
            }
            set {
                inverseField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool mutable {
            get {
                return mutableField;
            }
            set {
                mutableField = value;
            }
        }

        public virtual outerJoinStrategy outerjoin { get; set; }

        public virtual collectionFetchMode fetch { get; set; }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get {
                return optimisticlockField;
            }
            set {
                optimisticlockField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool embedxml {
            get {
                return embedxmlField;
            }
            set {
                embedxmlField = value;
            }
        }
    }
    
    public enum collectionLazy {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
        
        /// <remarks/>
        extra,
    }
    
    public partial class @class 
    {
        
        private List<meta> metaField;
        
        private subselect subselectField;
        
        private cache cacheField;
        
        private List<synchronize> synchronizeField;
        
        private comment commentField;
        
        private List<tuplizer> tuplizerField;
        
        private object itemField;
        
        private discriminator discriminatorField;
        
        private naturalid naturalidField;
        
        private object item1Field;
        
        private List<object> itemsField;
        
        private List<object> items1Field;
        
        private loader loaderField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private List<filter> filterField;
        
        private List<resultset> resultsetField;
        
        private List<object> items2Field;
        
        private string entitynameField;
        
        private string nameField;
        
        private string proxyField;
        
        private bool lazyField;
        
        private bool lazyFieldSpecified;
        
        private string schemaactionField;
        
        private string tableField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string subselect1Field;
        
        private string discriminatorvalueField;
        
        private bool mutableField;
        
        private bool abstractField;
        
        private bool abstractFieldSpecified;
        
        private polymorphismType polymorphismField;
        
        private string whereField;
        
        private string persisterField;
        
        private bool dynamicupdateField;
        
        private bool dynamicinsertField;
        
        private int batchsizeField;
        
        private bool batchsizeFieldSpecified;
        
        private bool selectbeforeupdateField;
        
        private optimisticLockMode optimisticlockField;
        
        private string checkField;
        
        private string rowidField;
        
        private string nodeField;
        
    public object Item {get; set;}

    public object Item1 {get; set;}

    public string entityname {get; set;}

    public string name {get; set;}

    public string proxy {get; set;}

    public bool lazy {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public string schemaaction {get; set;}

    public string table {get; set;}

    public string schema {get; set;}

    public string catalog {get; set;}

    public string subselect1 {get; set;}

    public string discriminatorvalue {get; set;}

    public bool Abstract {get; set;}

    [XmlIgnore()]
    public bool abstractSpecified {get; set;}

    public string where {get; set;}

    public string persister {get; set;}

    public int batchsize {get; set;}

    [XmlIgnore()]
    public bool batchsizeSpecified {get; set;}

    public string check {get; set;}

    public string rowid {get; set;}

    public string node {get; set;}

        
        public @class() 
        {
            items2Field = new List<object>();
            resultsetField = new List<resultset>();
            filterField = new List<filter>();
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            loaderField = new loader();
            items1Field = new List<object>();
            itemsField = new List<object>();
            naturalidField = new naturalid();
            discriminatorField = new discriminator();
            tuplizerField = new List<tuplizer>();
            commentField = new comment();
            synchronizeField = new List<synchronize>();
            cacheField = new cache();
            subselectField = new subselect();
            metaField = new List<meta>();
            mutableField = true;
            polymorphismField = polymorphismType.@implicit;
            dynamicupdateField = false;
            dynamicinsertField = false;
            selectbeforeupdateField = false;
            optimisticlockField = optimisticLockMode.version;
        }
        
        public virtual List<meta> meta 
        {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual subselect subselect {
            get {
                return subselectField;
            }
            set {
                subselectField = value;
            }
        }
        
        public virtual cache cache {
            get {
                return cacheField;
            }
            set {
                cacheField = value;
            }
        }
        
        public virtual List<synchronize> synchronize {
            get {
                return synchronizeField;
            }
            set {
                synchronizeField = value;
            }
        }
        
        public virtual comment comment {
            get {
                return commentField;
            }
            set {
                commentField = value;
            }
        }
        
        public virtual List<tuplizer> tuplizer {
            get {
                return tuplizerField;
            }
            set {
                tuplizerField = value;
            }
        }
        
        public virtual discriminator discriminator {
            get {
                return discriminatorField;
            }
            set {
                discriminatorField = value;
            }
        }
        
        public virtual naturalid naturalid {
            get {
                return naturalidField;
            }
            set {
                naturalidField = value;
            }
        }
        
        public virtual List<object> Items {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        public virtual List<object> Items1 {
            get {
                return items1Field;
            }
            set {
                items1Field = value;
            }
        }
        
        public virtual loader loader {
            get {
                return loaderField;
            }
            set {
                loaderField = value;
            }
        }
        
        public virtual customSQL sqlinsert {
            get {
                return sqlinsertField;
            }
            set {
                sqlinsertField = value;
            }
        }
        
        public virtual customSQL sqlupdate {
            get {
                return sqlupdateField;
            }
            set {
                sqlupdateField = value;
            }
        }
        
        public virtual customSQL sqldelete {
            get {
                return sqldeleteField;
            }
            set {
                sqldeleteField = value;
            }
        }
        
        public virtual List<filter> filter {
            get {
                return filterField;
            }
            set {
                filterField = value;
            }
        }
        
        public virtual List<resultset> resultset {
            get {
                return resultsetField;
            }
            set {
                resultsetField = value;
            }
        }
        
        public virtual List<object> Items2 {
            get {
                return items2Field;
            }
            set {
                items2Field = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool mutable 
        {
            get {
                return mutableField;
            }
            set {
                mutableField = value;
            }
        }
        
        [DefaultValue(polymorphismType.@implicit)]
        public virtual polymorphismType polymorphism {
            get {
                return polymorphismField;
            }
            set {
                polymorphismField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool dynamicupdate {
            get {
                return dynamicupdateField;
            }
            set {
                dynamicupdateField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool dynamicinsert {
            get {
                return dynamicinsertField;
            }
            set {
                dynamicinsertField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool selectbeforeupdate {
            get {
                return selectbeforeupdateField;
            }
            set {
                selectbeforeupdateField = value;
            }
        }
        
        [DefaultValue(optimisticLockMode.version)]
        public virtual optimisticLockMode optimisticlock {
            get {
                return optimisticlockField;
            }
            set {
                optimisticlockField = value;
            }
        }
    }
    
    public partial class tuplizer {
        
        private bool entitymodeFieldSpecified;
        
        private string classField;
        
    [XmlIgnore()]
    public bool entitymodeSpecified {get; set;}

    public string Class {get; set;}

        
        public virtual tuplizerEntitymode entitymode {
            get;
            set;
        }
    }
    
    public enum tuplizerEntitymode {
        
        /// <remarks/>
        poco,
        
        /// <remarks/>
        xml,
        
        /// <remarks/>
        [XmlEnum("dynamic-map")]
        dynamicmap,
    }
    
    public partial class compositeid {
        
        private List<meta> metaField;
        
        private List<object> itemsField;
        
        private string classField;
        
        private bool mappedField;
        
        private string nameField;
        
        private string nodeField;
        
        private string accessField;
        
        private unsavedValueType unsavedvalueField;
        
    public string Class {get; set;}

    public string name {get; set;}

    public string node {get; set;}

    public string access {get; set;}

        
        public compositeid() {
            itemsField = new List<object>();
            metaField = new List<meta>();
            mappedField = false;
            unsavedvalueField = unsavedValueType.undefined;
        }
        
        public virtual List<meta> meta {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual List<object> Items {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool mapped {
            get {
                return mappedField;
            }
            set {
                mappedField = value;
            }
        }
        
        [DefaultValue(unsavedValueType.undefined)]
        public virtual unsavedValueType unsavedvalue {
            get {
                return unsavedvalueField;
            }
            set {
                unsavedvalueField = value;
            }
        }
    }
    
    public partial class keymanytoone {
        
        private List<meta> metaField;
        
        private List<Column> columnField;
        
        private string nameField;
        
        private string accessField;
        
        private string classField;
        
        private string entitynameField;
        
        private string column1Field;
        
        private string foreignkeyField;
        
        private bool lazyFieldSpecified;
        
        private notFoundMode notfoundField;
        
    public string name {get; set;}

    public string access {get; set;}

    public string Class {get; set;}

    public string entityname {get; set;}

    public string column1 {get; set;}

    public string foreignkey {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

        
        public keymanytoone() {
            columnField = new List<Column>();
            metaField = new List<meta>();
            notfoundField = notFoundMode.exception;
        }
        
        public virtual List<meta> meta {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual List<Column> column {
            get {
                return columnField;
            }
            set {
                columnField = value;
            }
        }
        
        public virtual restrictedLaziness lazy {
            get;
            set;
        }
        
        [DefaultValue(notFoundMode.exception)]
        public virtual notFoundMode notfound {
            get;
            set;
        }
    }
    
    public partial class keyproperty {
        
        private List<meta> metaField;
        
        private List<Column> columnField;
        
        private type typeField;
        
        private string nameField;
        
        private string accessField;
        
        private string type1Field;
        
        private string column1Field;
        
        private string lengthField;
        
        private string nodeField;
        
    public string name {get; set;}

    public string access {get; set;}

    public string type1 {get; set;}

    public string column1 {get; set;}

    public string length {get; set;}

    public string node {get; set;}

        
        /// <summary>
        /// keyproperty class constructor
        /// </summary>
        public keyproperty() {
            typeField = new type();
            columnField = new List<Column>();
            metaField = new List<meta>();
        }
        
        public virtual List<meta> meta {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual List<Column> column {
            get {
                return columnField;
            }
            set {
                columnField = value;
            }
        }
        
        public virtual type type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
    }
    
    public enum unsavedValueType {
        
        /// <remarks/>
        undefined,
        
        /// <remarks/>
        any,
        
        /// <remarks/>
        none,
    }
    
    public partial class id {
        
        private List<meta> metaField;
        
        private List<Column> columnField;
        
        private type typeField;
        
        private generator generatorField;
        
        private string nameField;
        
        private string nodeField;
        
        private string accessField;
        
        private string column1Field;
        
        private string type1Field;
        
        private string lengthField;
        
        private string unsavedvalueField;
        
    public string name {get; set;}

    public string node {get; set;}

    public string access {get; set;}

    public string column1 {get; set;}

    public string type1 {get; set;}

    public string length {get; set;}

    public string unsavedvalue {get; set;}

        
        /// <summary>
        /// id class constructor
        /// </summary>
        public id() {
            generatorField = new generator();
            typeField = new type();
            columnField = new List<Column>();
            metaField = new List<meta>();
        }
        
        public virtual List<meta> meta {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual List<Column> column {
            get {
                return columnField;
            }
            set {
                columnField = value;
            }
        }
        
        public virtual type type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        public virtual generator generator {
            get {
                return generatorField;
            }
            set {
                generatorField = value;
            }
        }
    }
    
    public partial class generator {
        
        private List<param> paramField;
        
        private string classField;
        
    public string Class {get; set;}

        
        /// <summary>
        /// generator class constructor
        /// </summary>
        public generator() {
            paramField = new List<param>();
        }
        
        public virtual List<param> param {
            get {
                return paramField;
            }
            set {
                paramField = value;
            }
        }
    }
    
    public partial class discriminator {
        
        private object itemField;
        
        private string columnField;
        
        private string formulaField;
        
        private string typeField;
        
        private bool notnullField;
        
        private string lengthField;
        
        private bool forceField;
        
        private bool insertField;
        
    public object Item {get; set;}

    public string column {get; set;}

    public string formula {get; set;}

    public string length {get; set;}

        
        public discriminator() {
            typeField = "string";
            notnullField = true;
            forceField = false;
            insertField = true;
        }
        
        [DefaultValue("string")]
        public virtual string type {
            get {
                return typeField;
            }
            set {
                typeField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool notnull {
            get {
                return notnullField;
            }
            set {
                notnullField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool force {
            get {
                return forceField;
            }
            set {
                forceField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool insert {
            get {
                return insertField;
            }
            set {
                insertField = value;
            }
        }
    }
    
    public partial class naturalid {
        
        private List<object> itemsField;
        
        private bool mutableField;
        
        public naturalid() {
            itemsField = new List<object>();
            mutableField = false;
        }
        
        public virtual List<object> Items {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool mutable {
            get {
                return mutableField;
            }
            set {
                mutableField = value;
            }
        }
    }
    
    public partial class component {
        
        private List<meta> metaField;
        
        private List<tuplizer> tuplizerField;
        
        private parent parentField;
        
        private List<object> itemsField;
        
        private string classField;
        
        private string nameField;
        
        private string accessField;
        
        private bool uniqueField;
        
        private bool updateField;
        
        private bool insertField;
        
        private bool lazyField;
        
        private bool optimisticlockField;
        
        private string nodeField;
        
    public string Class {get; set;}

    public string name {get; set;}

    public string access {get; set;}

    public string node {get; set;}

        
        public component() {
            itemsField = new List<object>();
            parentField = new parent();
            tuplizerField = new List<tuplizer>();
            metaField = new List<meta>();
            uniqueField = false;
            updateField = true;
            insertField = true;
            lazyField = false;
            optimisticlockField = true;
        }
        
        public virtual List<meta> meta {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual List<tuplizer> tuplizer {
            get {
                return tuplizerField;
            }
            set {
                tuplizerField = value;
            }
        }
        
        public virtual parent parent {
            get {
                return parentField;
            }
            set {
                parentField = value;
            }
        }
        
        public virtual List<object> Items {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool unique {
            get {
                return uniqueField;
            }
            set {
                uniqueField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool update {
            get {
                return updateField;
            }
            set {
                updateField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool insert {
            get {
                return insertField;
            }
            set {
                insertField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool lazy {
            get {
                return lazyField;
            }
            set {
                lazyField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get {
                return optimisticlockField;
            }
            set {
                optimisticlockField = value;
            }
        }
    }
    
    public partial class dynamiccomponent {
        
        private List<object> itemsField;
        
        private string nameField;
        
        private string accessField;
        
        private bool uniqueField;
        
        private bool updateField;
        
        private bool insertField;
        
        private bool optimisticlockField;
        
        private string nodeField;
        
    public string name {get; set;}

    public string access {get; set;}

    public string node {get; set;}

        
        public dynamiccomponent() {
            itemsField = new List<object>();
            uniqueField = false;
            updateField = true;
            insertField = true;
            optimisticlockField = true;
        }
        
        public virtual List<object> Items {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        [DefaultValue(false)]
        public virtual bool unique {
            get {
                return uniqueField;
            }
            set {
                uniqueField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool update {
            get {
                return updateField;
            }
            set {
                updateField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool insert {
            get {
                return insertField;
            }
            set {
                insertField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get {
                return optimisticlockField;
            }
            set {
                optimisticlockField = value;
            }
        }
    }
    
    public partial class list {
        
        private List<meta> metaField;
        
        private subselect subselectField;
        
        private cache cacheField;
        
        private List<synchronize> synchronizeField;
        
        private comment commentField;
        
        private key keyField;
        
        private object itemField;
        
        private object item1Field;
        
        private loader loaderField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private customSQL sqldeleteallField;
        
        private List<filter> filterField;
        
        private string nameField;
        
        private string accessField;
        
        private string tableField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string subselect1Field;
        
        private bool lazyFieldSpecified;
        
        private bool inverseField;
        
        private bool mutableField;
        
        private string cascadeField;
        
        private string orderbyField;
        
        private string whereField;
        
        private int batchsizeField;
        
        private bool batchsizeFieldSpecified;
        
        private bool outerjoinFieldSpecified;
        
        private bool fetchFieldSpecified;
        
        private string persisterField;
        
        private string collectiontypeField;
        
        private string checkField;
        
        private bool optimisticlockField;
        
        private string nodeField;
        
        private bool embedxmlField;
        
        private bool genericField;
        
        private bool genericFieldSpecified;
        
    public object Item {get; set;}

    public object Item1 {get; set;}

    public string name {get; set;}

    public string access {get; set;}

    public string table {get; set;}

    public string schema {get; set;}

    public string catalog {get; set;}

    public string subselect1 {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public string cascade {get; set;}

    public string orderby {get; set;}

    public string where {get; set;}

    public int batchsize {get; set;}

    [XmlIgnore()]
    public bool batchsizeSpecified {get; set;}

    [XmlIgnore()]
    public bool outerjoinSpecified {get; set;}

    [XmlIgnore()]
    public bool fetchSpecified {get; set;}

    public string persister {get; set;}

    public string collectiontype {get; set;}

    public string check {get; set;}

    public string node {get; set;}

    public bool generic {get; set;}

    [XmlIgnore()]
    public bool genericSpecified {get; set;}

        
        public list() {
            filterField = new List<filter>();
            sqldeleteallField = new customSQL();
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            loaderField = new loader();
            keyField = new key();
            commentField = new comment();
            synchronizeField = new List<synchronize>();
            cacheField = new cache();
            subselectField = new subselect();
            metaField = new List<meta>();
            inverseField = false;
            mutableField = true;
            optimisticlockField = true;
            embedxmlField = true;
        }
        
        public virtual List<meta> meta {
            get;
            set;
        }
        
        public virtual subselect subselect {
            get;
            set;
        }
        
        public virtual cache cache {
            get;
            set;
        }
        
        public virtual List<synchronize> synchronize {
            get;
            set;
        }
        
        public virtual comment comment {
            get;
            set;
        }
        
        public virtual key key {
            get;
            set;
        }
        
        public virtual loader loader {
            get;
            set;
        }
        
        public virtual customSQL sqlinsert {
            get;
            set;
        }
        
        public virtual customSQL sqlupdate {
            get;
            set;
        }
        
        public virtual customSQL sqldelete {
            get;
            set;
        }
        
        public virtual customSQL sqldeleteall {
            get;
            set;
        }
        
        public virtual List<filter> filter {
            get;
            set;
        }
        
        public virtual collectionLazy lazy {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool inverse {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool mutable {
            get;
            set;
        }
        
        public virtual outerJoinStrategy outerjoin {
            get;
            set;
        }
        
        public virtual collectionFetchMode fetch {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool embedxml {
            get {
                return embedxmlField;
            }
            set {
                embedxmlField = value;
            }
        }
    }
    
    public partial class map {
        
        private List<meta> metaField;
        
        private subselect subselectField;
        
        private cache cacheField;
        
        private List<synchronize> synchronizeField;
        
        private comment commentField;
        
        private key keyField;
        
        private object itemField;
        
        private object item1Field;
        
        private loader loaderField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private customSQL sqldeleteallField;
        
        private List<filter> filterField;
        
        private string nameField;
        
        private string accessField;
        
        private string tableField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string subselect1Field;
        
        private bool lazyFieldSpecified;
        
        private bool inverseField;
        
        private bool mutableField;
        
        private string cascadeField;
        
        private string orderbyField;
        
        private string whereField;
        
        private int batchsizeField;
        
        private bool batchsizeFieldSpecified;
        
        private bool outerjoinFieldSpecified;
        
        private bool fetchFieldSpecified;
        
        private string persisterField;
        
        private string collectiontypeField;
        
        private string checkField;
        
        private bool optimisticlockField;
        
        private string nodeField;
        
        private bool embedxmlField;
        
        private bool genericField;
        
        private bool genericFieldSpecified;
        
        private string sortField;
        
    public object Item {get; set;}

    public object Item1 {get; set;}

    public string name {get; set;}

    public string access {get; set;}

    public string table {get; set;}

    public string schema {get; set;}

    public string catalog {get; set;}

    public string subselect1 {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public string cascade {get; set;}

    public string orderby {get; set;}

    public string where {get; set;}

    public int batchsize {get; set;}

    [XmlIgnore()]
    public bool batchsizeSpecified {get; set;}

    [XmlIgnore()]
    public bool outerjoinSpecified {get; set;}

    [XmlIgnore()]
    public bool fetchSpecified {get; set;}

    public string persister {get; set;}

    public string collectiontype {get; set;}

    public string check {get; set;}

    public string node {get; set;}

    public bool generic {get; set;}

    [XmlIgnore()]
    public bool genericSpecified {get; set;}

    public string sort {get; set;}

        
        public map() {
            filterField = new List<filter>();
            sqldeleteallField = new customSQL();
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            loaderField = new loader();
            keyField = new key();
            commentField = new comment();
            synchronizeField = new List<synchronize>();
            cacheField = new cache();
            subselectField = new subselect();
            metaField = new List<meta>();
            inverseField = false;
            mutableField = true;
            optimisticlockField = true;
            embedxmlField = true;
        }
        
        public virtual List<meta> meta {
            get;
            set;
        }
        
        public virtual subselect subselect {
            get;
            set;
        }
        
        public virtual cache cache {
            get;
            set;
        }
        
        public virtual List<synchronize> synchronize {
            get;
            set;
        }
        
        public virtual comment comment {
            get;
            set;
        }
        
        public virtual key key {
            get;
            set;
        }
        
        public virtual loader loader {
            get;
            set;
        }
        
        public virtual customSQL sqlinsert {
            get;
            set;
        }
        
        public virtual customSQL sqlupdate {
            get;
            set;
        }
        
        public virtual customSQL sqldelete {
            get;
            set;
        }
        
        public virtual customSQL sqldeleteall {
            get;
            set;
        }
        
        public virtual List<filter> filter {
            get;
            set;
        }
        
        public virtual collectionLazy lazy {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool inverse {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool mutable {
            get;
            set;
        }
        
        public virtual outerJoinStrategy outerjoin {
            get;
            set;
        }
        
        public virtual collectionFetchMode fetch {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool embedxml {
            get;
            set;
        }
    }
    
    public partial class compositeindex {
        
        private List<object> itemsField;
        
        private string classField;
        
    public string Class {get; set;}

        
        /// <summary>
        /// compositeindex class constructor
        /// </summary>
        public compositeindex() {
            itemsField = new List<object>();
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
    }
    
    public partial class compositemapkey {
        
        private List<object> itemsField;
        
        private string classField;
        
    public string Class {get; set;}

        
        /// <summary>
        /// compositemapkey class constructor
        /// </summary>
        public compositemapkey() {
            itemsField = new List<object>();
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
    }
    
    public partial class indexmanytoany {
        
        private List<Column> columnField;
        
        private string idtypeField;
        
        private string metatypeField;
        
        private string column1Field;
        
    public string idtype {get; set;}

    public string metatype {get; set;}

    public string column1 {get; set;}

        
        /// <summary>
        /// indexmanytoany class constructor
        /// </summary>
        public indexmanytoany() {
            columnField = new List<Column>();
        }
        
        public virtual List<Column> column {
            get;
            set;
        }
    }
    
    public partial class indexmanytomany {
        
        private List<Column> columnField;
        
        private string classField;
        
        private string entitynameField;
        
        private string column1Field;
        
        private string foreignkeyField;
        
    public string Class {get; set;}

    public string entityname {get; set;}

    public string column1 {get; set;}

    public string foreignkey {get; set;}

        
        /// <summary>
        /// indexmanytomany class constructor
        /// </summary>
        public indexmanytomany() {
            columnField = new List<Column>();
        }
        
        public virtual List<Column> column {
            get {
                return columnField;
            }
            set {
                columnField = value;
            }
        }
    }
    
    public partial class mapkey {
        
        private List<object> itemsField;
        
        private string columnField;
        
        private string formulaField;
        
        private string typeField;
        
        private string lengthField;
        
        private string nodeField;
        
    public string column {get; set;}

    public string formula {get; set;}

    public string type {get; set;}

    public string length {get; set;}

    public string node {get; set;}

        
        /// <summary>
        /// mapkey class constructor
        /// </summary>
        public mapkey() {
            itemsField = new List<object>();
        }
        
        public virtual List<object> Items {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
    }
    
    public partial class mapkeymanytomany {
        
        private List<object> itemsField;
        
        private string classField;
        
        private string entitynameField;
        
        private string columnField;
        
        private string formulaField;
        
        private string foreignkeyField;
        
    public string Class {get; set;}

    public string entityname {get; set;}

    public string column {get; set;}

    public string formula {get; set;}

    public string foreignkey {get; set;}

        
        /// <summary>
        /// mapkeymanytomany class constructor
        /// </summary>
        public mapkeymanytomany() {
            itemsField = new List<object>();
        }
        
        public virtual List<object> Items {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
    }
    
    public partial class onetoone {
        
        private List<meta> metaField;
        
        private List<formula> formulaField;
        
        private string nameField;
        
        private string formula1Field;
        
        private string accessField;
        
        private string classField;
        
        private string entitynameField;
        
        private string cascadeField;
        
        private bool outerjoinFieldSpecified;
        
        private bool fetchFieldSpecified;
        
        private bool constrainedField;
        
        private string foreignkeyField;
        
        private string propertyrefField;
        
        private bool lazyFieldSpecified;
        
        private string nodeField;
        
        private bool embedxmlField;
        
    public string name {get; set;}

    public string formula1 {get; set;}

    public string access {get; set;}

    public string Class {get; set;}

    public string entityname {get; set;}

    public string cascade {get; set;}

    [XmlIgnore()]
    public bool outerjoinSpecified {get; set;}

    [XmlIgnore()]
    public bool fetchSpecified {get; set;}

    public string foreignkey {get; set;}

    public string propertyref {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public string node {get; set;}

        
        public onetoone() {
            formulaField = new List<formula>();
            metaField = new List<meta>();
            constrainedField = false;
            embedxmlField = true;
        }
        
        public virtual List<meta> meta {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual List<formula> formula {
            get {
                return formulaField;
            }
            set {
                formulaField = value;
            }
        }
        
        public virtual outerJoinStrategy outerjoin {
            get;
            set;
        }
        
        public virtual fetchMode fetch {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool constrained {
            get;
            set;
        }
        
        public virtual laziness lazy {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool embedxml {
            get;
            set;
        }
    }
    
    public partial class primitivearray {
        
        private List<meta> metaField;
        
        private subselect subselectField;
        
        private cache cacheField;
        
        private List<synchronize> synchronizeField;
        
        private comment commentField;
        
        private key keyField;
        
        private object itemField;
        
        private element elementField;
        
        private loader loaderField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private customSQL sqldeleteallField;
        
        private string nameField;
        
        private string accessField;
        
        private string tableField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string subselect1Field;
        
        private bool mutableField;
        
        private string whereField;
        
        private string batchsizeField;
        
        private bool outerjoinFieldSpecified;
        
        private bool fetchFieldSpecified;
        
        private string persisterField;
        
        private string collectiontypeField;
        
        private string checkField;
        
        private bool optimisticlockField;
        
        private string nodeField;
        
        private bool embedxmlField;
        
    public object Item {get; set;}

    public string name {get; set;}

    public string access {get; set;}

    public string table {get; set;}

    public string schema {get; set;}

    public string catalog {get; set;}

    public string subselect1 {get; set;}

    public string where {get; set;}

    public string batchsize {get; set;}

    [XmlIgnore()]
    public bool outerjoinSpecified {get; set;}

    [XmlIgnore()]
    public bool fetchSpecified {get; set;}

    public string persister {get; set;}

    public string collectiontype {get; set;}

    public string check {get; set;}

    public string node {get; set;}

        
        public primitivearray() {
            sqldeleteallField = new customSQL();
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            loaderField = new loader();
            elementField = new element();
            keyField = new key();
            commentField = new comment();
            synchronizeField = new List<synchronize>();
            cacheField = new cache();
            subselectField = new subselect();
            metaField = new List<meta>();
            mutableField = true;
            optimisticlockField = true;
            embedxmlField = true;
        }
        
        public virtual List<meta> meta {
            get;
            set;
        }
        
        public virtual subselect subselect {
            get;
            set;
        }
        
        public virtual cache cache {
            get;
            set;
        }
        
        public virtual List<synchronize> synchronize {
            get;
            set;
        }
        
        public virtual comment comment {
            get;
            set;
        }
        
        public virtual key key {
            get;
            set;
        }
        
        public virtual element element {
            get;
            set;
        }
        
        public virtual loader loader {
            get;
            set;
        }
        
        public virtual customSQL sqlinsert {
            get;
            set;
        }
        
        public virtual customSQL sqlupdate {
            get;
            set;
        }
        
        public virtual customSQL sqldelete {
            get;
            set;
        }
        
        public virtual customSQL sqldeleteall {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool mutable {
            get;
            set;
        }
        
        public virtual primitivearrayOuterjoin outerjoin {
            get;
            set;
        }
        
        public virtual primitivearrayFetch fetch {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool embedxml {
            get;
            set;
        }
    }
    
    public enum primitivearrayOuterjoin {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
        
        /// <remarks/>
        auto,
    }
    
    public enum primitivearrayFetch {
        
        /// <remarks/>
        join,
        
        /// <remarks/>
        select,
        
        /// <remarks/>
        subselect,
    }
    
    public partial class set {
        
        private List<meta> metaField;
        
        private subselect subselectField;
        
        private cache cacheField;
        
        private List<synchronize> synchronizeField;
        
        private comment commentField;
        
        private key keyField;
        
        private object itemField;
        
        private loader loaderField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private customSQL sqldeleteallField;
        
        private List<filter> filterField;
        
        private string nameField;
        
        private string accessField;
        
        private string tableField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string subselect1Field;
        
        private bool lazyFieldSpecified;
        
        private bool inverseField;
        
        private bool mutableField;
        
        private string cascadeField;
        
        private string orderbyField;
        
        private string whereField;
        
        private int batchsizeField;
        
        private bool batchsizeFieldSpecified;
        
        private bool outerjoinFieldSpecified;
        
        private bool fetchFieldSpecified;
        
        private string persisterField;
        
        private string collectiontypeField;
        
        private string checkField;
        
        private bool optimisticlockField;
        
        private string nodeField;
        
        private bool embedxmlField;
        
        private bool genericField;
        
        private bool genericFieldSpecified;
        
        private string sortField;
        
    public object Item {get; set;}

    public string name {get; set;}

    public string access {get; set;}

    public string table {get; set;}

    public string schema {get; set;}

    public string catalog {get; set;}

    public string subselect1 {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public string cascade {get; set;}

    public string orderby {get; set;}

    public string where {get; set;}

    public int batchsize {get; set;}

    [XmlIgnore()]
    public bool batchsizeSpecified {get; set;}

    [XmlIgnore()]
    public bool outerjoinSpecified {get; set;}

    [XmlIgnore()]
    public bool fetchSpecified {get; set;}

    public string persister {get; set;}

    public string collectiontype {get; set;}

    public string check {get; set;}

    public string node {get; set;}

    public bool generic {get; set;}

    [XmlIgnore()]
    public bool genericSpecified {get; set;}

    public string sort {get; set;}

        
        public set() {
            filterField = new List<filter>();
            sqldeleteallField = new customSQL();
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            loaderField = new loader();
            keyField = new key();
            commentField = new comment();
            synchronizeField = new List<synchronize>();
            cacheField = new cache();
            subselectField = new subselect();
            metaField = new List<meta>();
            inverseField = false;
            mutableField = true;
            optimisticlockField = true;
            embedxmlField = true;
        }
        
        public virtual List<meta> meta {
            get;
            set;
        }
        
        public virtual subselect subselect {
            get;
            set;
        }
        
        public virtual cache cache {
            get;
            set;
        }

        public virtual List<synchronize> synchronize
        {
            get;
            set;
        }
        
        public virtual comment comment {
            get;
            set;
        }
        
        public virtual key key {
            get;
            set;
        }
        
        public virtual loader loader {
            get;
            set;
        }
        
        public virtual customSQL sqlinsert {
            get;
            set;
        }
        
        public virtual customSQL sqlupdate {
            get;
            set;
        }
        
        public virtual customSQL sqldelete {
            get;
            set;
        }
        
        public virtual customSQL sqldeleteall {
            get;
            set;
        }
        
        public virtual List<filter> filter {
            get;
            set;
        }
        
        public virtual collectionLazy lazy {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool inverse {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool mutable {
            get;
            set;
        }
        
        public virtual outerJoinStrategy outerjoin {
            get;
            set;
        }
        
        public virtual collectionFetchMode fetch {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool embedxml {
            get;
            set;
        }
    }
    
    public partial class idbag {
        
        private List<meta> metaField;
        
        private subselect subselectField;
        
        private cache cacheField;
        
        private List<synchronize> synchronizeField;
        
        private comment commentField;
        
        private collectionid collectionidField;
        
        private key keyField;
        
        private object itemField;
        
        private loader loaderField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private customSQL sqldeleteallField;
        
        private List<filter> filterField;
        
        private string nameField;
        
        private string accessField;
        
        private string tableField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string subselect1Field;
        
        private bool lazyFieldSpecified;
        
        private bool inverseField;
        
        private bool mutableField;
        
        private string cascadeField;
        
        private string orderbyField;
        
        private string whereField;
        
        private int batchsizeField;
        
        private bool batchsizeFieldSpecified;
        
        private bool outerjoinFieldSpecified;
        
        private bool fetchFieldSpecified;
        
        private string persisterField;
        
        private string collectiontypeField;
        
        private string checkField;
        
        private bool optimisticlockField;
        
        private string nodeField;
        
        private bool embedxmlField;
        
        private bool genericField;
        
        private bool genericFieldSpecified;
        
    public object Item {get; set;}

    public string name {get; set;}

    public string access {get; set;}

    public string table {get; set;}

    public string schema {get; set;}

    public string catalog {get; set;}

    public string subselect1 {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public string cascade {get; set;}

    public string orderby {get; set;}

    public string where {get; set;}

    public int batchsize {get; set;}

    [XmlIgnore()]
    public bool batchsizeSpecified {get; set;}

    [XmlIgnore()]
    public bool outerjoinSpecified {get; set;}

    [XmlIgnore()]
    public bool fetchSpecified {get; set;}

    public string persister {get; set;}

    public string collectiontype {get; set;}

    public string check {get; set;}

    public string node {get; set;}

    public bool generic {get; set;}

    [XmlIgnore()]
    public bool genericSpecified {get; set;}

        
        public idbag() {
            filterField = new List<filter>();
            sqldeleteallField = new customSQL();
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            loaderField = new loader();
            keyField = new key();
            collectionidField = new collectionid();
            commentField = new comment();
            synchronizeField = new List<synchronize>();
            cacheField = new cache();
            subselectField = new subselect();
            metaField = new List<meta>();
            inverseField = false;
            mutableField = true;
            optimisticlockField = true;
            embedxmlField = true;
        }
        
        public virtual List<meta> meta {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual subselect subselect {
            get {
                return subselectField;
            }
            set {
                subselectField = value;
            }
        }
        
        public virtual cache cache {
            get {
                return cacheField;
            }
            set {
                cacheField = value;
            }
        }
        
        public virtual List<synchronize> synchronize {
            get {
                return synchronizeField;
            }
            set {
                synchronizeField = value;
            }
        }
        
        public virtual comment comment {
            get {
                return commentField;
            }
            set {
                commentField = value;
            }
        }
        
        public virtual collectionid collectionid {
            get {
                return collectionidField;
            }
            set {
                collectionidField = value;
            }
        }
        
        public virtual key key {
            get {
                return keyField;
            }
            set {
                keyField = value;
            }
        }
        
        public virtual loader loader {
            get {
                return loaderField;
            }
            set {
                loaderField = value;
            }
        }
        
        public virtual customSQL sqlinsert {
            get {
                return sqlinsertField;
            }
            set {
                sqlinsertField = value;
            }
        }
        
        public virtual customSQL sqlupdate {
            get {
                return sqlupdateField;
            }
            set {
                sqlupdateField = value;
            }
        }
        
        public virtual customSQL sqldelete {
            get {
                return sqldeleteField;
            }
            set {
                sqldeleteField = value;
            }
        }
        
        public virtual customSQL sqldeleteall {
            get {
                return sqldeleteallField;
            }
            set {
                sqldeleteallField = value;
            }
        }
        
        public virtual List<filter> filter {
            get {
                return filterField;
            }
            set {
                filterField = value;
            }
        }

        public virtual collectionLazy lazy { get; set; }

        [DefaultValue(false)]
        public virtual bool inverse { get; set; }

        [DefaultValue(true)]
        public virtual bool mutable { get; set; }

        public virtual outerJoinStrategy outerjoin
        {
            get;
            set; 
        }

        public virtual collectionFetchMode fetch  { get; set; }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock
        {
            get;
            set; 
        }
        
        [DefaultValue(true)]
        public virtual bool embedxml
        {
            get;
            set; 
        }
    }
    
    public partial class collectionid {
        
        private List<meta> metaField;
        
        private List<Column> columnField;
        
        private generator generatorField;
        
        private string column1Field;
        
        private string typeField;
        
        private string lengthField;
        
    public string column1 {get; set;}

    public string type {get; set;}

    public string length {get; set;}

        
        /// <summary>
        /// collectionid class constructor
        /// </summary>
        public collectionid() {
            generatorField = new generator();
            columnField = new List<Column>();
            metaField = new List<meta>();
        }
        
        public virtual List<meta> meta 
        {
            get;
            set;
        }
        
        public virtual List<Column> column { get; set; }

        public virtual generator generator
        {
            get;
            set; 
        }
    }
    
    public partial class timestamp {
        
        private List<meta> metaField;
        
        private string nameField;
        
        private string nodeField;
        
        private string columnField;
        
        private string accessField;
        
        private bool unsavedvalueFieldSpecified;
        
        private timestampSource sourceField;
        
        private versionGeneration generatedField;
        
    public string name {get; set;}

    public string node {get; set;}

    public string column {get; set;}

    public string access {get; set;}

    [XmlIgnore()]
    public bool unsavedvalueSpecified {get; set;}

        
        public timestamp() {
            metaField = new List<meta>();
            sourceField = timestampSource.vm;
            generatedField = versionGeneration.never;
        }
        
        public virtual List<meta> meta {
            get;
            set;
        }
        
        public virtual timestampUnsavedvalue unsavedvalue {
            get;
            set;
        }
        
        [DefaultValue(timestampSource.vm)]
        public virtual timestampSource source {
            get;
            set;
        }
        
        [DefaultValue(versionGeneration.never)]
        public virtual versionGeneration generated {
            get;
            set;
        }
    }
    
    public enum timestampUnsavedvalue {
        
        /// <remarks/>
        @null,
        
        /// <remarks/>
        undefined,
    }
    
    public enum timestampSource {
        
        /// <remarks/>
        vm,
        
        /// <remarks/>
        db,
    }
    
    public enum versionGeneration {
        
        /// <remarks/>
        never,
        
        /// <remarks/>
        always,
    }
    
    public partial class version {
        
        private List<meta> metaField;
        
        private List<Column> columnField;
        
        private string nameField;
        
        private string nodeField;
        
        private string accessField;
        
        private string column1Field;
        
        private string typeField;
        
        private string unsavedvalueField;
        
        private versionGeneration generatedField;
        
        private bool insertField;
        
        private bool insertFieldSpecified;
        
    public string name {get; set;}

    public string node {get; set;}

    public string access {get; set;}

    public string column1 {get; set;}

    public string unsavedvalue {get; set;}

    public bool insert {get; set;}

    [XmlIgnore()]
    public bool insertSpecified {get; set;}

        
        public version() {
            columnField = new List<Column>();
            metaField = new List<meta>();
            typeField = "Int32";
            generatedField = versionGeneration.never;
        }
        
        public virtual List<meta> meta { get; set; }
        
        public virtual List<Column> column { get; set; }
        
        [DefaultValue("Int32")]
        public virtual string type
        {
            get;
            set; 
        }
        
        [DefaultValue(versionGeneration.never)]
        public virtual versionGeneration generated {
            get;
            set;
        }
    }
    
    public partial class properties {
        
        private List<object> itemsField;
        
        private string nameField;
        
        private bool uniqueField;
        
        private bool insertField;
        
        private bool updateField;
        
        private bool optimisticlockField;
        
        private string nodeField;
        
    public string name {get; set;}

    public string node {get; set;}

        
        public properties() {
            itemsField = new List<object>();
            uniqueField = false;
            insertField = true;
            updateField = true;
            optimisticlockField = true;
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool unique {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool insert {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool update {
            get;
            set;
        }
        
        [DefaultValue(true)]
        public virtual bool optimisticlock {
            get;
            set;
        }
    }
    
    public partial class join {
        
        private subselect subselectField;
        
        private comment commentField;
        
        private key keyField;
        
        private List<object> itemsField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private string tableField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string subselect1Field;
        
        private joinFetch fetchField;
        
        private bool inverseField;
        
        private bool optionalField;
        
    public string table {get; set;}

    public string schema {get; set;}

    public string catalog {get; set;}

    public string subselect1 {get; set;}

        
        public join() 
        {
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            itemsField = new List<object>();
            keyField = new key();
            commentField = new comment();
            subselectField = new subselect();
            fetchField = joinFetch.join;
            inverseField = false;
            optionalField = false;
        }
        
        public virtual subselect subselect {
            get;
            set;
        }
        
        public virtual comment comment {
            get;
            set;
        }
        
        public virtual key key {
            get;
            set;
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
        
        public virtual customSQL sqlinsert {
            get;
            set;
        }
        
        public virtual customSQL sqlupdate {
            get;
            set;
        }
        
        public virtual customSQL sqldelete {
            get;
            set;
        }
        
        [DefaultValue(joinFetch.join)]
        public virtual joinFetch fetch {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool inverse {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool optional {
            get;
            set;
        }
    }
    
    public enum joinFetch {
        
        /// <remarks/>
        join,
        
        /// <remarks/>
        select,
    }
    
    public partial class joinedsubclass {
        
        private List<meta> metaField;
        
        private subselect subselectField;
        
        private List<synchronize> synchronizeField;
        
        private comment commentField;
        
        private List<tuplizer> tuplizerField;
        
        private key keyField;
        
        private List<object> itemsField;
        
        private List<joinedsubclass> joinedsubclass1Field;
        
        private loader loaderField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private List<resultset> resultsetField;
        
        private List<object> items1Field;
        
        private string entitynameField;
        
        private string nameField;
        
        private string proxyField;
        
        private string tableField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string subselect1Field;
        
        private bool dynamicupdateField;
        
        private bool dynamicinsertField;
        
        private bool selectbeforeupdateField;
        
        private string extendsField;
        
        private bool lazyField;
        
        private bool lazyFieldSpecified;
        
        private bool abstractField;
        
        private bool abstractFieldSpecified;
        
        private string persisterField;
        
        private string checkField;
        
        private string batchsizeField;
        
        private string nodeField;
        
    public string entityname {get; set;}

    public string name {get; set;}

    public string proxy {get; set;}

    public string table {get; set;}

    public string schema {get; set;}

    public string catalog {get; set;}

    public string subselect1 {get; set;}

    public string extends {get; set;}

    public bool lazy {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public bool Abstract {get; set;}

    [XmlIgnore()]
    public bool abstractSpecified {get; set;}

    public string persister {get; set;}

    public string check {get; set;}

    public string batchsize {get; set;}

    public string node {get; set;}

        
        public joinedsubclass() {
            items1Field = new List<object>();
            resultsetField = new List<resultset>();
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            loaderField = new loader();
            joinedsubclass1Field = new List<joinedsubclass>();
            itemsField = new List<object>();
            keyField = new key();
            tuplizerField = new List<tuplizer>();
            commentField = new comment();
            synchronizeField = new List<synchronize>();
            subselectField = new subselect();
            metaField = new List<meta>();
            dynamicupdateField = false;
            dynamicinsertField = false;
            selectbeforeupdateField = false;
        }
        
        public virtual List<meta> meta {
            get;
            set;
        }
        
        public virtual subselect subselect {
            get;
            set;
        }
        
        public virtual List<synchronize> synchronize {
            get;
            set;
        }
        
        public virtual comment comment {
            get;
            set;
        }
        
        public virtual List<tuplizer> tuplizer {
            get;
            set;
        }
        
        public virtual key key {
            get;
            set;
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
        
        public virtual List<joinedsubclass> joinedsubclass1 {
            get;
            set;
        }
        
        public virtual loader loader {
            get;
            set;
        }
        
        public virtual customSQL sqlinsert {
            get;
            set;
        }
        
        public virtual customSQL sqlupdate {
            get;
            set;
        }
        
        public virtual customSQL sqldelete {
            get;
            set;
        }
        
        public virtual List<resultset> resultset {
            get;
            set;
        }
        
        public virtual List<object> Items1 {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool dynamicupdate {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool dynamicinsert {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool selectbeforeupdate {
            get;
            set;
        }
    }
    
    public partial class resultset {
        
        private List<object> itemsField;
        
        private string nameField;
        
    public string name {get; set;}

        
        /// <summary>
        /// resultset class constructor
        /// </summary>
        public resultset() {
            itemsField = new List<object>();
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
    }
    
    public partial class loadcollection {
        
        private List<returnproperty> returnpropertyField;
        
        private string aliasField;
        
        private string roleField;
        
        private lockMode lockmodeField;
        
    public string alias {get; set;}

    public string role {get; set;}

        
        public loadcollection() {
            returnpropertyField = new List<returnproperty>();
            lockmodeField = lockMode.read;
        }
        
        public virtual List<returnproperty> returnproperty {
            get;
            set;
        }
        
        [DefaultValue(lockMode.read)]
        public virtual lockMode lockmode {
            get;
            set;
        }
    }
    
    public partial class returnproperty {
        
        private List<returncolumn> returncolumnField;
        
        private string nameField;
        
        private string columnField;
        
    public string name {get; set;}

    public string column {get; set;}

        
        /// <summary>
        /// returnproperty class constructor
        /// </summary>
        public returnproperty() {
            returncolumnField = new List<returncolumn>();
        }
        
        public virtual List<returncolumn> returncolumn {
            get {
                return returncolumnField;
            }
            set {
                returncolumnField = value;
            }
        }
    }
    
    public partial class returncolumn {
        
        private string nameField;
        
    public string name {get; set;}

    }
    
    public enum lockMode {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        read,
        
        /// <remarks/>
        upgrade,
        
        /// <remarks/>
        [XmlEnum("upgrade-nowait")]
        upgradenowait,
        
        /// <remarks/>
        write,
    }
    
    public partial class @return {
        
        private returndiscriminator returndiscriminatorField;
        
        private List<returnproperty> returnpropertyField;
        
        private string aliasField;
        
        private string entitynameField;
        
        private string classField;
        
        private lockMode lockmodeField;
        
    public string alias {get; set;}

    public string entityname {get; set;}

    public string Class {get; set;}

        
        public @return() {
            returnpropertyField = new List<returnproperty>();
            returndiscriminatorField = new returndiscriminator();
            lockmodeField = lockMode.read;
        }
        
        public virtual returndiscriminator returndiscriminator {
            get;
            set;
        }
        
        public virtual List<returnproperty> returnproperty {
            get;
            set;
        }
        
        [DefaultValue(lockMode.read)]
        public virtual lockMode lockmode {
            get;
            set;
        }
    }
    
    public partial class returndiscriminator {
        
        private string columnField;
        
    public string column {get; set;}

    }
    
    public partial class returnjoin {
        
        private List<returnproperty> returnpropertyField;
        
        private string aliasField;
        
        private string propertyField;
        
        private lockMode lockmodeField;
        
    public string alias {get; set;}

    public string property {get; set;}

        
        public returnjoin() {
            returnpropertyField = new List<returnproperty>();
            lockmodeField = lockMode.read;
        }
        
        public virtual List<returnproperty> returnproperty {
            get;
            set;
        }
        
        [DefaultValue(lockMode.read)]
        public virtual lockMode lockmode {
            get;
            set;
        }
    }
    
    public partial class returnscalar {
        
        private string columnField;
        
        private string typeField;
        
    public string column {get; set;}

    public string type {get; set;}

    }
    
    public partial class query {
        
        private List<queryparam> itemsField;
        
        private List<string> textField;
        
        private string nameField;
        
        private bool flushmodeFieldSpecified;
        
        private bool cacheableField;
        
        private string cacheregionField;
        
        private int fetchsizeField;
        
        private bool fetchsizeFieldSpecified;
        
        private string timeoutField;
        
        private bool cachemodeFieldSpecified;
        
        private bool readonlyField;
        
        private bool readonlyFieldSpecified;
        
        private string commentField;
        
    public string name {get; set;}

    [XmlIgnore()]
    public bool flushmodeSpecified {get; set;}

    public string cacheregion {get; set;}

    public int fetchsize {get; set;}

    [XmlIgnore()]
    public bool fetchsizeSpecified {get; set;}

    public string timeout {get; set;}

    [XmlIgnore()]
    public bool cachemodeSpecified {get; set;}

    public bool Readonly {get; set;}

    [XmlIgnore()]
    public bool readonlySpecified {get; set;}

    public string comment {get; set;}

        
        public query() {
            textField = new List<string>();
            itemsField = new List<queryparam>();
            cacheableField = false;
        }
        
        public virtual List<queryparam> Items {
            get;
            set;
        }
        
        [XmlText()]
        public virtual List<string> Text {
            get;
            set;
        }
        
        public virtual flushMode flushmode {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool cacheable {
            get;
            set;
        }
        
        public virtual cacheMode cachemode {
            get;
            set;
        }
    }
    
    public partial class queryparam {
        
        private string nameField;
        
        private string typeField;
        
    public string name {get; set;}

    public string type {get; set;}

    }
    
    public enum flushMode {
        
        /// <remarks/>
        auto,
        
        /// <remarks/>
        never,
        
        /// <remarks/>
        always,
    }
    
    public enum cacheMode {
        
        /// <remarks/>
        get,
        
        /// <remarks/>
        ignore,
        
        /// <remarks/>
        normal,
        
        /// <remarks/>
        put,
        
        /// <remarks/>
        refresh,
    }
    
    public partial class sqlquery {
        
        private List<object> itemsField;
        
        private List<string> textField;
        
        private string nameField;
        
        private string resultsetrefField;
        
        private bool flushmodeFieldSpecified;
        
        private bool cacheableField;
        
        private string cacheregionField;
        
        private int fetchsizeField;
        
        private bool fetchsizeFieldSpecified;
        
        private string timeoutField;
        
        private bool cachemodeFieldSpecified;
        
        private bool readonlyField;
        
        private bool readonlyFieldSpecified;
        
        private string commentField;
        
        private bool callableField;
        
    public string name {get; set;}

    public string resultsetref {get; set;}

    [XmlIgnore()]
    public bool flushmodeSpecified {get; set;}

    public string cacheregion {get; set;}

    public int fetchsize {get; set;}

    [XmlIgnore()]
    public bool fetchsizeSpecified {get; set;}

    public string timeout {get; set;}

    [XmlIgnore()]
    public bool cachemodeSpecified {get; set;}

    public bool Readonly {get; set;}

    [XmlIgnore()]
    public bool readonlySpecified {get; set;}

    public string comment {get; set;}

        
        public sqlquery() {
            textField = new List<string>();
            itemsField = new List<object>();
            cacheableField = false;
            callableField = false;
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
        
        [XmlText()]
        public virtual List<string> Text {
            get;
            set;
        }
        
        public virtual flushMode flushmode {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool cacheable {
            get;
            set;
        }
        
        public virtual cacheMode cachemode {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool callable {
            get;
            set;
        }
    }
    
    public partial class subclass {
        
        private List<meta> metaField;
        
        private List<tuplizer> tuplizerField;
        
        private List<synchronize> synchronizeField;
        
        private List<object> itemsField;
        
        private List<join> joinField;
        
        private List<subclass> subclass1Field;
        
        private loader loaderField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private List<resultset> resultsetField;
        
        private List<object> items1Field;
        
        private string entitynameField;
        
        private string nameField;
        
        private string proxyField;
        
        private string discriminatorvalueField;
        
        private bool dynamicupdateField;
        
        private bool dynamicinsertField;
        
        private bool selectbeforeupdateField;
        
        private string extendsField;
        
        private bool lazyField;
        
        private bool lazyFieldSpecified;
        
        private bool abstractField;
        
        private bool abstractFieldSpecified;
        
        private string persisterField;
        
        private string batchsizeField;
        
        private string nodeField;
        
    public string entityname {get; set;}

    public string name {get; set;}

    public string proxy {get; set;}

    public string discriminatorvalue {get; set;}

    public string extends {get; set;}

    public bool lazy {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public bool Abstract {get; set;}

    [XmlIgnore()]
    public bool abstractSpecified {get; set;}

    public string persister {get; set;}

    public string batchsize {get; set;}

    public string node {get; set;}

        
        public subclass() {
            items1Field = new List<object>();
            resultsetField = new List<resultset>();
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            loaderField = new loader();
            subclass1Field = new List<subclass>();
            joinField = new List<join>();
            itemsField = new List<object>();
            synchronizeField = new List<synchronize>();
            tuplizerField = new List<tuplizer>();
            metaField = new List<meta>();
            dynamicupdateField = false;
            dynamicinsertField = false;
            selectbeforeupdateField = false;
        }
        
        public virtual List<meta> meta {
            get;
            set;
        }
        
        public virtual List<tuplizer> tuplizer {
            get;
            set;
        }
        
        public virtual List<synchronize> synchronize {
            get;
            set;
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
        
        public virtual List<join> join {
            get;
            set;
        }
        
        public virtual List<subclass> subclass1 {
            get;
            set;
        }
        
        public virtual loader loader {
            get;
            set;
        }
        
        public virtual customSQL sqlinsert {
            get;
            set;
        }
        
        public virtual customSQL sqlupdate {
            get;
            set;
        }
        
        public virtual customSQL sqldelete {
            get;
            set;
        }
        
        public virtual List<resultset> resultset {
            get;
            set;
        }
        
        public virtual List<object> Items1 {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool dynamicupdate { get; set; }
        
        [DefaultValue(false)]
        public virtual bool dynamicinsert {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool selectbeforeupdate {
            get;
            set;
        }
    }
    
    public partial class unionsubclass {
        
        private List<meta> metaField;
        
        private subselect subselectField;
        
        private List<synchronize> synchronizeField;
        
        private comment commentField;
        
        private List<tuplizer> tuplizerField;
        
        private List<object> itemsField;
        
        private List<unionsubclass> unionsubclass1Field;
        
        private loader loaderField;
        
        private customSQL sqlinsertField;
        
        private customSQL sqlupdateField;
        
        private customSQL sqldeleteField;
        
        private List<resultset> resultsetField;
        
        private List<object> items1Field;
        
        private string entitynameField;
        
        private string nameField;
        
        private string proxyField;
        
        private string tableField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string subselect1Field;
        
        private bool dynamicupdateField;
        
        private bool dynamicinsertField;
        
        private bool selectbeforeupdateField;
        
        private string extendsField;
        
        private bool lazyField;
        
        private bool lazyFieldSpecified;
        
        private bool abstractField;
        
        private bool abstractFieldSpecified;
        
        private string persisterField;
        
        private string checkField;
        
        private string batchsizeField;
        
        private string nodeField;
        
    public string entityname {get; set;}

    public string name {get; set;}

    public string proxy {get; set;}

    public string table {get; set;}

    public string schema {get; set;}

    public string catalog {get; set;}

    public string subselect1 {get; set;}

    public string extends {get; set;}

    public bool lazy {get; set;}

    [XmlIgnore()]
    public bool lazySpecified {get; set;}

    public bool Abstract {get; set;}

    [XmlIgnore()]
    public bool abstractSpecified {get; set;}

    public string persister {get; set;}

    public string check {get; set;}

    public string batchsize {get; set;}

    public string node {get; set;}

        
        public unionsubclass() {
            items1Field = new List<object>();
            resultsetField = new List<resultset>();
            sqldeleteField = new customSQL();
            sqlupdateField = new customSQL();
            sqlinsertField = new customSQL();
            loaderField = new loader();
            unionsubclass1Field = new List<unionsubclass>();
            itemsField = new List<object>();
            tuplizerField = new List<tuplizer>();
            commentField = new comment();
            synchronizeField = new List<synchronize>();
            subselectField = new subselect();
            metaField = new List<meta>();
            dynamicupdateField = false;
            dynamicinsertField = false;
            selectbeforeupdateField = false;
        }
        
        public virtual List<meta> meta {
            get;
            set;
        }
        
        public virtual subselect subselect {
            get;
            set;
        }
        
        public virtual List<synchronize> synchronize {
            get;
            set;
        }
        
        public virtual comment comment {
            get;
            set;
        }
        
        public virtual List<tuplizer> tuplizer {
            get;
            set;
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
        
        public virtual List<unionsubclass> unionsubclass1 {
            get;
            set;
        }
        
        public virtual loader loader {
            get;
            set;
        }
        
        public virtual customSQL sqlinsert {
            get;
            set;
        }
        
        public virtual customSQL sqlupdate {
            get;
            set;
        }
        
        public virtual customSQL sqldelete {
            get;
            set;
        }
        
        public virtual List<resultset> resultset {
            get;
            set;
        }
        
        public virtual List<object> Items1 {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool dynamicupdate {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool dynamicinsert {
            get;
            set;
        }
        
        [DefaultValue(false)]
        public virtual bool selectbeforeupdate {
            get;
            set;
        }
    }
    
    public enum polymorphismType {
        
        /// <remarks/>
        @implicit,
        
        /// <remarks/>
        @explicit,
    }
    
    public enum optimisticLockMode {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        version,
        
        /// <remarks/>
        dirty,
        
        /// <remarks/>
        all,
    }
    
    public partial class create {
        
        private List<string> textField;
        
        /// <summary>
        /// create class constructor
        /// </summary>
        public create() {
            textField = new List<string>();
        }
        
        [XmlText()]
        public virtual List<string> Text {
            get;
            set;
        }
    }
    
    public partial class databaseobject {
        
        private List<object> itemsField;
        
        private List<dialectscope> dialectscopeField;
        
        /// <summary>
        /// databaseobject class constructor
        /// </summary>
        public databaseobject() {
            dialectscopeField = new List<dialectscope>();
            itemsField = new List<object>();
        }
        
        public virtual List<object> Items {
            get;
            set;
        }
        
        public virtual List<dialectscope> dialectscope {
            get;
            set;
        }
    }
    
    public partial class definition {
        
        private List<param> paramField;
        
        private string classField;
        
    public string Class {get; set;}

        
        /// <summary>
        /// definition class constructor
        /// </summary>
        public definition() {
            paramField = new List<param>();
        }
        
        public virtual List<param> param {
            get;
            set;
        }
    }
    
    public partial class drop {
        
        private List<string> textField;
        
        /// <summary>
        /// drop class constructor
        /// </summary>
        public drop() {
            textField = new List<string>();
        }
        
        [XmlText()]
        public virtual List<string> Text {
            get;
            set;
        }
    }
    
    public partial class dialectscope {
        
        private string nameField;
        
        private List<string> textField;
        
    public string name {get; set;}

        
        /// <summary>
        /// dialectscope class constructor
        /// </summary>
        public dialectscope() {
            textField = new List<string>();
        }
        
        [XmlText()]
        public virtual List<string> Text {
            get;
            set;
        }
    }
    
    public partial class filterdef {
        
        private List<filterparam> itemsField;
        
        private List<string> textField;
        
        private string nameField;
        
        private string conditionField;
        
        private bool usemanytooneField;
        
    public string name {get; set;}

    public string condition {get; set;}

        
        public filterdef() {
            textField = new List<string>();
            itemsField = new List<filterparam>();
            usemanytooneField = true;
        }
        
        public virtual List<filterparam> Items {
            get;
            set;
        }
        
        [XmlText()]
        public virtual List<string> Text {
            get {
                return textField;
            }
            set {
                textField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool usemanytoone {
            get {
                return usemanytooneField;
            }
            set {
                usemanytooneField = value;
            }
        }
    }
    
    public partial class filterparam {
        
        private string nameField;
        
        private string typeField;
        
    public string name {get; set;}

    public string type {get; set;}

    }
    
    public partial class hibernatemapping {
        
        private List<meta> metaField;
        
        private List<typedef> typedefField;
        
        private List<import> importField;
        
        private List<object> itemsField;
        
        private List<resultset> resultsetField;
        
        private List<object> items1Field;
        
        private List<filterdef> filterdefField;
        
        private List<databaseobject> databaseobjectField;
        
        private string schemaField;
        
        private string catalogField;
        
        private string defaultcascadeField;
        
        private string defaultaccessField;
        
        private bool defaultlazyField;
        
        private bool autoimportField;
        
        private string namespaceField;
        
        private string assemblyField;
        
    public string schema {get; set;}

    public string catalog {get; set;}

    public string Namespace {get; set;}

    public string assembly {get; set;}

        
        public hibernatemapping() {
            databaseobjectField = new List<databaseobject>();
            filterdefField = new List<filterdef>();
            items1Field = new List<object>();
            resultsetField = new List<resultset>();
            itemsField = new List<object>();
            importField = new List<import>();
            typedefField = new List<typedef>();
            metaField = new List<meta>();
            defaultcascadeField = "none";
            defaultaccessField = "property";
            defaultlazyField = true;
            autoimportField = true;
        }
        
        public virtual List<meta> meta {
            get {
                return metaField;
            }
            set {
                metaField = value;
            }
        }
        
        public virtual List<typedef> typedef {
            get {
                return typedefField;
            }
            set {
                typedefField = value;
            }
        }
        
        public virtual List<import> import {
            get {
                return importField;
            }
            set {
                importField = value;
            }
        }
        
        public virtual List<object> Items {
            get {
                return itemsField;
            }
            set {
                itemsField = value;
            }
        }
        
        public virtual List<resultset> resultset {
            get {
                return resultsetField;
            }
            set {
                resultsetField = value;
            }
        }
        
        public virtual List<object> Items1 {
            get {
                return items1Field;
            }
            set {
                items1Field = value;
            }
        }
        
        public virtual List<filterdef> filterdef {
            get {
                return filterdefField;
            }
            set {
                filterdefField = value;
            }
        }
        
        public virtual List<databaseobject> databaseobject {
            get {
                return databaseobjectField;
            }
            set {
                databaseobjectField = value;
            }
        }
        
        [DefaultValue("none")]
        public virtual string defaultcascade {
            get {
                return defaultcascadeField;
            }
            set {
                defaultcascadeField = value;
            }
        }
        
        [DefaultValue("property")]
        public virtual string defaultaccess {
            get {
                return defaultaccessField;
            }
            set {
                defaultaccessField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool defaultlazy {
            get {
                return defaultlazyField;
            }
            set {
                defaultlazyField = value;
            }
        }
        
        [DefaultValue(true)]
        public virtual bool autoimport {
            get {
                return autoimportField;
            }
            set {
                autoimportField = value;
            }
        }
    }
    
    public partial class typedef {
        
        private List<param> paramField;
        
        private string classField;
        
        private string nameField;
        
    public string Class {get; set;}

    public string name {get; set;}

        
        /// <summary>
        /// typedef class constructor
        /// </summary>
        public typedef() {
            paramField = new List<param>();
        }
        
        public virtual List<param> param {
            get {
                return paramField;
            }
            set {
                paramField = value;
            }
        }
    }
    
    public partial class import {
        
        private string classField;
        
        private string renameField;
        
    public string Class {get; set;}

    public string rename {get; set;}

    }
}
